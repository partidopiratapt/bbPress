<?php
/**
 * XML-RPC protocol support for bbPress
 *
 * @since 1.0
 * @package bbPress
 */



/**
 * Whether this is an XML-RPC Request
 *
 * @since 1.0
 * @var bool
 */
define('XMLRPC_REQUEST', true);

// Some browser-embedded clients send cookies. We don't want them.
$_COOKIE = array();

// A bug in PHP < 5.2.2 makes $HTTP_RAW_POST_DATA not set by default,
// but we can do it ourself.
if ( !isset( $HTTP_RAW_POST_DATA ) ) {
	$HTTP_RAW_POST_DATA = file_get_contents( 'php://input' );
}

// fix for mozBlog and other cases where '<?xml' isn't on the very first line
if ( isset($HTTP_RAW_POST_DATA) ) {
	$HTTP_RAW_POST_DATA = trim($HTTP_RAW_POST_DATA);
}

// Load bbPress
require_once('./bb-load.php');



// If the service discovery data is requested then return it and exit
if ( isset( $_GET['rsd'] ) ) {
	header('Content-Type: text/xml; charset=UTF-8', true);
?>
<?php echo '<?xml version="1.0" encoding="UTF-8"?'.'>' . "\n"; ?>
<rsd version="1.0" xmlns="http://archipelago.phrasewise.com/rsd">
	<service>
		<engineName>bbPress</engineName>
		<engineLink>http://bbpress.org/</engineLink>
		<homePageLink><?php bb_uri() ?></homePageLink>
		<apis>
			<api name="bbPress" blogID="" preferred="true" apiLink="<?php bb_uri('xmlrpc.php') ?>" />
		</apis>
	</service>
</rsd>
<?php
	exit;
}



// Load the XML-RPC server/client classes
require_once(BACKPRESS_PATH . '/class.ixr.php');



/**
 * XML-RPC server class to allow for remote publishing
 *
 * @since 1.0
 * @package bbPress
 * @subpackage Publishing
 * @uses class IXR_Server
 */
class BB_XMLRPC_Server extends IXR_Server
{
	/**
	 * Stores the last error generated by the class
	 *
	 * @since 1.0
	 * @var object|boolean An instance of the IXR_Error class or false if no error exists
	 */
	var $error = false;
	
	/**
	 * Site options which can be manipulated using XML-RPC
	 *
	 * @since 1.0
	 * @var array
	 */
	var $site_options = array();
	
	/**
	 * Initialises the XML-RPC server
	 *
	 * @since 1.0
	 * @return void
	 */
	function bb_xmlrpc_server()
	{
		// bbPress publishing API
		if (bb_get_option('enable_xmlrpc')) {
			$this->methods = array(
				// - Demo
				'demo.sayHello'			=> 'this:sayHello',
				'demo.addTwoNumbers'	=> 'this:addTwoNumbers',
				// - Forums
				'bb.getForumCount'		=> 'this:bb_getForumCount',
				'bb.getForums'			=> 'this:bb_getForums',
				'bb.getForum'			=> 'this:bb_getForum',
				'bb.newForum'			=> 'this:bb_newForum',
				'bb.editForum'			=> 'this:bb_editForum',
				'bb.deleteForum'		=> 'this:bb_deleteForum',
				// - Topics
				'bb.getTopicCount'		=> 'this:bb_getTopicCount',
				'bb.getTopics'			=> 'this:bb_getTopics',
				'bb.getTopic'			=> 'this:bb_getTopic',
				'bb.newTopic'			=> 'this:bb_newTopic',
				//'bb.editTopic'			=> 'this:bb_editTopic',
				//'bb.deleteTopic'		=> 'this:bb_deleteTopic',
				// - Tags
				//'bb.getTagCount'		=> 'this:bb_getTagCount',
				//'bb.getTags'			=> 'this:bb_getTags',
				//'bb.getTag'				=> 'this:bb_getTag',
				//'bb.newTag'				=> 'this:bb_newTag',
				//'bb.editTag'			=> 'this:bb_editTag',
				//'bb.deleteTag'			=> 'this:bb_deleteTag',
				//'bb.mergeTags'			=> 'this:bb_mergeTags',
				// - Replies
				//'bb.getReplyCount'		=> 'this:bb_getReplyCount',
				//'bb.getReplies'			=> 'this:bb_getReplies',
				//'bb.getReply'			=> 'this:bb_getReply',
				//'bb.newReply'			=> 'this:bb_newReply',
				//'bb.editReply'			=> 'this:bb_editReply',
				//'bb.deleteReply'		=> 'this:bb_deleteReply',
				// - Options
				'bb.getOptions'			=> 'this:bb_getOptions',
				'bb.setOptions'			=> 'this:bb_setOptions'
			);
		}

		// Pingback
		if (bb_get_option('enable_pingback')) {
			$this->methods = array_merge($this->methods, array(
				'pingback.ping' => 'this:pingback_ping',
				'pingback.extensions.getPingbacks' => 'this:pingback_extensions_getPingbacks'
			));
		}

		$this->initialise_site_option_info();
		$this->methods = apply_filters('bb_xmlrpc_methods', $this->methods);
		$this->IXR_Server($this->methods);
	}



	/**
	 * Utility methods
	 */

	/**
	 * Checks the user credentials supplied in the request to make sure they are valid
	 *
	 * @since 1.0
	 * @return integer|boolean The user id if the user is valid, otherwise false
	 * @param string $user_login The users login
	 * @param string $user_pass The users password in plain text
	 */
	function authenticate($user_login, $user_pass)
	{
		$user = bb_check_login( $user_login, $user_pass );
		if ( !$user || is_wp_error($user) ) {
			$this->error = new IXR_Error(403, __('The supplied authentication is invalid.'));
			return false;
		}

		return $user->ID;
	}

	/**
	 * Sanitises data from XML-RPC request parameters
	 *
	 * @since 1.0
	 * @return mixed The sanitised variable, should come back with the same type
	 * @param $array mixed The variable to be sanitised
	 * @uses $bbdb BackPress database class instance
	 */
	function escape(&$array)
	{
		global $bbdb;

		if (!is_array($array)) {
			// Escape it
			$array = $bbdb->escape($array);
		} elseif (count($array)) {
			foreach ( (array) $array as $k => $v ) {
				if (is_array($v)) {
					// Recursively sanitize arrays
					$this->escape($array[$k]);
				} else if (is_object($v)) {
					// Don't sanitise objects - shouldn't happen anyway
				} else {
					// Escape it
					$array[$k] = $bbdb->escape($v);
				}
			}
		}
		
		return $array;
	}



	/**
	 * bbPress publishing API - Demo XML-RPC methods
	 */

	/**
	 * Hello world demo function for XML-RPC
	 *
	 * @since 1.0
	 * @return string The phrase 'Hello!'.
	 * @param array $args Arguments passed by the XML-RPC call.
	 *
	 * XML-RPC request to get a greeting
	 * <methodCall>
	 *     <methodName>demo.sayHello</methodName>
	 *     <params></params>
	 * </methodCall>
	 */
	function sayHello($args)
	{
		return 'Hello!';
	}

	/**
	 * Adds two numbers together as a demo of XML-RPC
	 *
	 * @since 1.0
	 * @return integer The sum of the two supplied numbers.
	 * @param array $args Arguments passed by the XML-RPC call.
	 * @param integer $args[0] The first number to be added.
	 * @param integer $args[1] The second number to be added.
	 *
	 * XML-RPC request to get the sum of two numbers
	 * <methodCall>
	 *     <methodName>demo.addTwoNumbers</methodName>
	 *     <params>
	 *         <param><value><int>5</int></value></param>
	 *         <param><value><int>102</int></value></param>
	 *     </params>
	 * </methodCall>
	 */
	function addTwoNumbers($args)
	{
		$number1 = $args[0];
		$number2 = $args[1];
		return $number1 + $number2;
	}



	/**
	 * bbPress publishing API - Forum XML-RPC methods
	 */

	/**
	 * Returns a numerical count of forums
	 *
	 * This method does not require authentication
	 *
	 * @since 1.0
	 * @return integer|object The number of forums when successfully executed or an IXR_Error object on failure
	 * @param array $args Arguments passed by the XML-RPC call.
	 * @param integer|string $args[0] The parent forum's id or slug (optional).
	 * @param integer $args[1] is the depth of child forums to retrieve (optional).
	 *
	 * XML-RPC request to get a count of all forums in the bbPress instance
	 * <methodCall>
	 *     <methodName>bb.getForumCount</methodName>
	 *     <params></params>
	 * </methodCall>
	 *
	 * XML-RPC request to get a count of all child forums in the forum with id number 34
	 * <methodCall>
	 *     <methodName>bb.getForumCount</methodName>
	 *     <params>
	 *         <param><value><int>34</int></value></param>
	 *     </params>
	 * </methodCall>
	 *
	 * XML-RPC request to get a count of all child forums in the forum with slug "first-forum"
	 * <methodCall>
	 *     <methodName>bb.getForumCount</methodName>
	 *     <params>
	 *         <param><value><string>first-forum</string></value></param>
	 *     </params>
	 * </methodCall>
	 *
	 * XML-RPC request to get a count of all child forums in the forum with id number 34 no more than 2 forums deep in the hierarchy
	 * <methodCall>
	 *     <methodName>bb.getForumCount</methodName>
	 *     <params>
	 *         <param><value><int>34</int></value></param>
	 *         <param><value><int>2</int></value></param>
	 *     </params>
	 * </methodCall>
	 */
	function bb_getForumCount($args)
	{
		do_action('bb_xmlrpc_call', 'bb.getForumCount');

		$this->escape($args);

		if (is_array($args)) {
			// Can be numeric id or slug - sanitised in get_forum()
			$forum_id = $args[0];

			// Can only be an integer
			$depth = (int) $args[1];
		} else {
			$forum_id = $args;
		}

		// Setup an array to store arguments to pass to get_forums() function
		$get_forums_args = array();

		if ($forum_id) {
			// First check the requested forum exists
			if (!$forum = get_forum($forum_id)) {
				$this->error = new IXR_Error(404, __('The requested parent forum does not exist.'));
				return $this->error;
			}
			// Add the specific forum to the arguments
			$get_forums_args['child_of'] = $forum->forum_id;
		}

		if ($depth) {
			// Add the depth to traverse to to the arguments
			$get_forums_args['depth'] = $depth;
			// Only make it hierarchical if the depth !== 1
			if ($depth === 1) {
				$get_forums_args['hierarchical'] = 0;
			} else {
				$get_forums_args['hierarchical'] = 1;
			}
		}

		// Get the forums
		$forums = get_forums($get_forums_args);

		// Return an error when no forums exist
		if ( !$forums ) {
			$this->error = new IXR_Error(404, __('No forums found.'));
			return $this->error;
		}

		// Return a count of the forums
		return count($forums);
	}

	/**
	 * Returns details of multiple forums
	 *
	 * This method does not require authentication
	 *
	 * @since 1.0
	 * @return array|object An array containing details of all returned forums when successfully executed or an IXR_Error object on failure
	 * @param array $args Arguments passed by the XML-RPC call.
	 * @param integer|string $args[0] The parent forum's id or slug (optional).
	 * @param integer $args[1] is the depth of child forums to retrieve (optional).
	 *
	 * XML-RPC request to get all forums in the bbPress instance
	 * <methodCall>
	 *     <methodName>bb.getForums</methodName>
	 *     <params></params>
	 * </methodCall>
	 *
	 * XML-RPC request to get all child forums in the forum with id number 34
	 * <methodCall>
	 *     <methodName>bb.getForums</methodName>
	 *     <params>
	 *         <param><value><int>34</int></value></param>
	 *     </params>
	 * </methodCall>
	 *
	 * XML-RPC request to get all child forums in the forum with slug "first-forum"
	 * <methodCall>
	 *     <methodName>bb.getForums</methodName>
	 *     <params>
	 *         <param><value><string>first-forum</string></value></param>
	 *     </params>
	 * </methodCall>
	 *
	 * XML-RPC request to get all child forums in the forum with id number 34 no more than 2 forums deep in the hierarchy
	 * <methodCall>
	 *     <methodName>bb.getForums</methodName>
	 *     <params>
	 *         <param><value><int>34</int></value></param>
	 *         <param><value><int>2</int></value></param>
	 *     </params>
	 * </methodCall>
	 */
	function bb_getForums($args)
	{
		do_action('bb_xmlrpc_call', 'bb.getForums');

		$this->escape($args);

		if (is_array($args)) {
			// Can be numeric id or slug - sanitised in get_forum()
			$forum_id = $args[0];

			// Can only be an integer
			$depth = (int) $args[1];
		} else {
			$forum_id = $args;
		}

		// Setup an array to store arguments to pass to get_forums() function
		$get_forums_args = array();

		if ($forum_id) {
			// First check the requested forum exists
			if (!$forum = get_forum($forum_id)) {
				$this->error = new IXR_Error(404, __('The requested parent forum does not exist.'));
				return $this->error;
			}
			// Add the specific forum to the arguments
			$get_forums_args['child_of'] = $forum->forum_id;
		}

		if ($depth) {
			// Add the depth to traverse to to the arguments
			$get_forums_args['depth'] = $depth;
			// Only make it hierarchical if the depth !== 1
			if ($depth === 1) {
				$get_forums_args['hierarchical'] = 0;
			} else {
				$get_forums_args['hierarchical'] = 1;
			}
		}

		// Get the forums
		$forums = get_forums($get_forums_args);

		// Return an error when no forums exist
		if ( !$forums ) {
			$this->error = new IXR_Error(404, __('No forums found.'));
			return $this->error;
		} else {
			// Only include "safe" data in the array
			$_forums = array();
			foreach ($forums as $key => $forum) {
				// Cast to an array
				$_forum = (array) $forum;
				// Set the URI
				$_forum['forum_uri'] = get_forum_link($_forum['forum_id']);
				if (!isset($_forum['forum_is_category'])) {
					$_forum['forum_is_category'] = 0;
				}
				// Allow plugins to add to the array
				$_forums[$_forum['forum_id']] = apply_filters('bb.getForums_sanitise', $_forum, (array) $forum);
			}
		}

		// Return the forums
		return $_forums;
	}

	/**
	 * Returns details of a forum
	 *
	 * This method does not require authentication
	 *
	 * @since 1.0
	 * @return array|object An array containing details of the returned forum when successfully executed or an IXR_Error object on failure
	 * @param array $args The forum's id or slug.
	 *
	 * XML-RPC request to get the forum with id number 34
	 * <methodCall>
	 *     <methodName>bb.getForum</methodName>
	 *     <params>
	 *         <param><value><int>34</int></value></param>
	 *     </params>
	 * </methodCall>
	 *
	 * XML-RPC request to get the forum with slug "first-forum"
	 * <methodCall>
	 *     <methodName>bb.getForum</methodName>
	 *     <params>
	 *         <param><value><string>first-forum</string></value></param>
	 *     </params>
	 * </methodCall>
	 */
	function bb_getForum($args)
	{
		do_action('bb_xmlrpc_call', 'bb.getForum');

		$this->escape($args);

		// Don't accept arrays of arguments
		if (is_array($args)) {
			$this->error = new IXR_Error(404, __('The requested method only accepts one parameter.'));
			return $this->error;
		} else {
			// Can be numeric id or slug - sanitised in get_forum()
			$forum_id = $args;
		}

		// Check the requested forum exists
		if (!$forum_id || !$forum = get_forum($forum_id)) {
			$this->error = new IXR_Error(404, __('The requested forum does not exist.'));
			return $this->error;
		}

		// Cast to an array
		$_forum = (array) $forum;
		// Set the URI
		$_forum['forum_uri'] = get_forum_link($_forum['forum_id']);
		if (!isset($_forum['forum_is_category'])) {
			$_forum['forum_is_category'] = 0;
		}
		// Allow plugins to add to the array
		$_forum = apply_filters('bb.getForum_sanitise', $_forum, (array) $forum);

		// Return the forums
		return $_forum;
	}

	/**
	 * Creates a new forum
	 *
	 * This method requires authentication
	 *
	 * @since 1.0
	 * @return integer|object The forum id when successfully created or an IXR_Error object on failure
	 * @param array $args Arguments passed by the XML-RPC call.
	 * @param string $args[0] The username for authentication.
	 * @param string $args[1] The password for authentication.
	 * @param array $args[2] The values for the various settings in the new forum.
	 * @param string $args[2]['name'] The name of the forum.
	 * @param string $args[2]['description'] The description of the forum (optional).
	 * @param integer $args[2]['parent_id'] The unique id of the parent forum for this forum (optional).
	 * @param integer $args[2]['order'] The position of the forum in the forum list (optional).
	 * @param integer $args[2]['is_category'] Whether the forum is simply a container category (optional).
	 *
	 * XML-RPC request to create a new sub-forum called "A new forum" inside the parent forum with id 2
	 * <methodCall>
	 *     <methodName>bb.newForum</methodName>
	 *     <params>
	 *         <param><value><string>joeblow</string></value></param>
	 *         <param><value><string>123password</string></value></param>
	 *         <param><value><struct>
	 *             <member>
	 *                 <name>name</name>
	 *                 <value><string>A new forum</string></value>
	 *             </member>
	 *             <member>
	 *                 <name>parent_id</name>
	 *                 <value><integer>2</integer></value>
	 *             </member>
	 *         </struct></value></param>
	 *     </params>
	 * </methodCall>
	 */
	function bb_newForum($args)
	{
		$this->escape($args);

		// Get the login credentials
		$username = $args[0];
		$password = $args[1];

		// Check the user is valid
		if( !$user_id = $this->authenticate( $username, $password ) ) {
			// The error is set in authenticate()
			return $this->error;
		}

		// Set the current user
		$user = bb_set_current_user( $user_id );

		// Make sure they are allowed to do this
		if(!bb_current_user_can('manage_forums')) {
			$this->error = new IXR_Error(403, __('You are not allowed to create new forums.'));
			return $this->error;
		}

		// Do the action once we are authenticated
		do_action('bb_xmlrpc_call', 'bb.newForum');

		// Make sure there is something for us to do
		if (!$args[2] || !is_array($args[2]) || !count($args[2])) {
			$this->error = new IXR_Error(404, __('No data for the new forum was supplied.'));
			return $this->error;
		} else {
			$structure = (array) $args[2];
		}

		// Minimum requirement is a name for the new forum
		if (!isset($structure['name']) || !$structure['name']) {
			$this->error = new IXR_Error(404, __('You must supply a name for the forum.'));
			return $this->error;
		}

		// Inject settings into an array suitable for bb_new_forum()
		$structure = array(
			'forum_name' => $structure['name'],
			'forum_desc' => $structure['description'],
			'forum_parent' => $structure['parent_id'],
			'forum_order' => $structure['order'],
			'forum_is_category' => $structure['is_category']
		);
		// Remove empty settings so that changes to the defaults in bb_new_forum() are honoured
		$structure = array_filter($structure);

		// Leave the require until the very end
		require_once(BB_PATH . 'bb-admin/admin-functions.php');

		// Create the forum
		if (!$forum_id = bb_new_forum($structure)) {
			$this->error = new IXR_Error(404, __('The new forum could not be created.'));
			return $this->error;
		}

		return (int) $forum_id;
	}

	/**
	 * Edits an existing forum
	 *
	 * This method requires authentication
	 *
	 * @since 1.0
	 * @return integer|object The forum id when successfully edited or an IXR_Error object on failure
	 * @param array $args Arguments passed by the XML-RPC call.
	 * @param string $args[0] The username for authentication.
	 * @param string $args[1] The password for authentication.
	 * @param string $args[2] The unique id of the forum to be edited.
	 * @param array $args[3] The values for the various settings in the new forum, at least one must be specified.
	 * @param string $args[3]['name'] The name of the forum (optional).
	 * @param string $args[3]['slug'] The slug for the forum (optional).
	 * @param string $args[3]['description'] The description of the forum (optional).
	 * @param integer $args[3]['parent_id'] The unique id of the parent forum for this forum (optional).
	 * @param integer $args[3]['order'] The position of the forum in the forum list (optional).
	 * @param integer $args[3]['is_category'] Whether the forum is simply a container category (optional).
	 *
	 * XML-RPC request to edit a forum with id 11, changing the description
	 * <methodCall>
	 *     <methodName>bb.editForum</methodName>
	 *     <params>
	 *         <param><value><string>joeblow</string></value></param>
	 *         <param><value><string>123password</string></value></param>
	 *         <param><value><integer>11</integer></value></param>
	 *         <param><value><struct>
	 *             <member>
	 *                 <name>description</name>
	 *                 <value><string>This is a great forum for all sorts of reasons.</string></value>
	 *             </member>
	 *         </struct></value></param>
	 *     </params>
	 * </methodCall>
	 */
	function bb_editForum($args)
	{
		$this->escape($args);

		// Get the login credentials
		$username = $args[0];
		$password = $args[1];

		// Check the user is valid
		if( !$user_id = $this->authenticate( $username, $password ) ) {
			// The error is set in authenticate()
			return $this->error;
		}

		// Set the current user
		$user = bb_set_current_user( $user_id );

		// Make sure they are allowed to do this
		if(!bb_current_user_can('manage_forums')) {
			$this->error = new IXR_Error(403, __('You are not allowed to edit forums.'));
			return $this->error;
		}

		// Get the forum id
		$forum_id = $args[2];

		// Check the requested forum exists
		if (!$forum_id || !$forum = get_forum($forum_id)) {
			$this->error = new IXR_Error(404, __('The requested forum does not exist.'));
			return $this->error;
		}

		// Do the action once we are authenticated
		do_action('bb_xmlrpc_call', 'bb.editForum');

		// Cast the forum object as an array
		$forum = (array) $forum;
		// The forum id may have been a slug, so make sure it's an integer here
		$forum_id = $forum['forum_id'];

		// Remove some unneeded indexes
		unset($forum['topics']);
		unset($forum['posts']);

		// Add one if it isn't there
		if (!isset($forum['forum_is_category'])) {
			$forum['forum_is_category'] = 0;
		}

		// Make sure there is something for us to do
		if (!$args[3] || !is_array($args[3]) || !count($args[3])) {
			$this->error = new IXR_Error(404, __('No data for the forum was supplied.'));
			return $this->error;
		} else {
			$structure = (array) $args[3];
		}

		// Don't allow name to be blanked
		if (isset($structure['name']) && !$structure['name']) {
			unset($structure['name']);
			$this->error = new IXR_Error(404, __('You must supply a name for the forum.'));
			return $this->error;
		}

		// Inject structure into an array suitable for bb_update_forum()
		$_structure = array(
			'forum_name' => $structure['name']
		);

		// Slug cannot be blank
		if (isset($structure['slug']) && $structure['slug'] !== '') {
			$_structure['forum_slug'] = $structure['slug'];
		}

		// Description can be nothing, but must be set
		if (isset($structure['description'])) {
			$_structure['forum_desc'] = $structure['description'];
		}

		// Parent forum ID must be an integer and it can be 0
		if (isset($structure['parent_id']) && is_integer($structure['parent_id'])) {
			$_structure['forum_parent'] = $structure['parent_id'];
		}

		// Order must be an integer and it can be 0
		if (isset($structure['order']) && is_integer($structure['order'])) {
			$_structure['forum_order'] = $structure['order'];
		}

		// Category flag must be an integer and it can be 0
		if (isset($structure['is_category']) && is_integer($structure['is_category'])) {
			$_structure['forum_is_category'] = $structure['is_category'];
		}

		// Merge the changes into the existing data for the forum
		$structure = wp_parse_args( $_structure, $forum );

		// Leave the require until the very end
		require_once(BB_PATH . 'bb-admin/admin-functions.php');

		// Update the forum
		if (!bb_update_forum($structure)) {
			$this->error = new IXR_Error(404, __('The forum could not be edited.'));
			return $this->error;
		}

		return (int) $forum_id;
	}

	/**
	 * Deletes a forum
	 *
	 * This method requires authentication
	 *
	 * @since 1.0
	 * @return integer|object 1 when successfully deleted or an IXR_Error object on failure
	 * @param array $args Arguments passed by the XML-RPC call.
	 * @param string $args[0] The username for authentication.
	 * @param string $args[1] The password for authentication.
	 * @param string $args[2] The unique id of the forum to be deleted.
	 *
	 * XML-RPC request to delete a forum with the slug "naughty-forum"
	 * <methodCall>
	 *     <methodName>bb.deleteForum</methodName>
	 *     <params>
	 *         <param><value><string>joeblow</string></value></param>
	 *         <param><value><string>123password</string></value></param>
	 *         <param><value><string>naughty-forum</string></value></param>
	 *     </params>
	 * </methodCall>
	 */
	function bb_deleteForum($args)
	{
		$this->escape($args);

		// Get the login credentials
		$username = $args[0];
		$password = $args[1];

		// Check the user is valid
		if( !$user_id = $this->authenticate( $username, $password ) ) {
			// The error is set in authenticate()
			return $this->error;
		}

		// Set the current user
		$user = bb_set_current_user( $user_id );

		// Make sure they are allowed to do this
		if (!bb_current_user_can('delete_forums')) {
			$this->error = new IXR_Error(403, __('You are not allowed to delete forums.'));
			return $this->error;
		}

		// Get the forum id
		$forum_id = $args[2];

		// Check the requested forum exists
		if (!$forum_id || !$forum = get_forum($forum_id)) {
			$this->error = new IXR_Error(404, __('The requested forum does not exist.'));
			return $this->error;
		}

		// The forum id may have been a slug, so make sure it's an integer here
		$forum_id = $forum->forum_id;

		// Make sure they are allowed to delete this forum specifically
		if (!bb_current_user_can('delete_forum', $forum_id)) {
			$this->error = new IXR_Error(403, __('You are not allowed to delete this forum.'));
			return $this->error;
		}

		// Do the action once we are authenticated
		do_action('bb_xmlrpc_call', 'bb.deleteForum');

		// Leave the require until the very end
		require_once(BB_PATH . 'bb-admin/admin-functions.php');

		// Delete the forum
		if (!bb_delete_forum($forum_id)) {
			$this->error = new IXR_Error(404, __('The forum could not be deleted.'));
			return $this->error;
		}

		return 1;
	}



	/**
	 * bbPress publishing API - Topic XML-RPC methods
	 */

	/**
	 * Returns a numerical count of topics
	 *
	 * This method does not require authentication
	 *
	 * @since 1.0
	 * @return integer|object The number of topics when successfully executed or an IXR_Error object on failure
	 * @param array $args Arguments passed by the XML-RPC call.
	 * @param integer|string $args[0] The forum id or slug (optional).
	 *
	 * XML-RPC request to get a count of all topics in the bbPress instance
	 * <methodCall>
	 *     <methodName>bb.getTopicCount</methodName>
	 *     <params></params>
	 * </methodCall>
	 *
	 * XML-RPC request to get a count of all topics in the forum with id number 34
	 * <methodCall>
	 *     <methodName>bb.getTopicCount</methodName>
	 *     <params>
	 *         <param><value><int>34</int></value></param>
	 *     </params>
	 * </methodCall>
	 *
	 * XML-RPC request to get a count of all topics in the forum with slug "first-forum"
	 * <methodCall>
	 *     <methodName>bb.getTopicCount</methodName>
	 *     <params>
	 *         <param><value><string>first-forum</string></value></param>
	 *     </params>
	 * </methodCall>
	 */
	function bb_getTopicCount($args)
	{
		do_action('bb_xmlrpc_call', 'bb.getTopicCount');

		$this->escape($args);

		// Don't accept arrays of arguments
		if (is_array($args)) {
			$this->error = new IXR_Error(404, __('The requested method only accepts one parameter.'));
			return $this->error;
		} else {
			// Can be numeric id or slug - sanitised in get_forum()
			$forum_id = $args;
		}

		// Check the requested forum exists
		if ($forum_id) {
			if (!$forum = get_forum($forum_id)) {
				$this->error = new IXR_Error(404, __('The requested forum does not exist.'));
				return $this->error;
			}

			// OK, let's trust the count in the forum table
			$count = $forum->topics;
		} else {
			// Get all forums
			$forums = get_forums();
	
			// Return an error when no forums exist
			if ( !$forums ) {
				$this->error = new IXR_Error(404, __('No forums found.'));
				return $this->error;
			}

			// Count the topics
			$count = 0;
			foreach ($forums as $forum) {
				$count += $forum->topics;
			}
		}

		// Return the count of topics
		return $count;
	}

	/**
	 * Returns details of the latest topics
	 *
	 * This method does not require authentication
	 *
	 * @since 1.0
	 * @return integer|object The number of topics when successfully executed or an IXR_Error object on failure
	 * @param array $args Arguments passed by the XML-RPC call.
	 * @param integer|string $args[0] The forum id or slug (optional).
	 * @param integer $args[1] The number of the page to return (optional).
	 * @param integer $args[2] The number of topics to return (optional).
	 *
	 * XML-RPC request to get all topics in the bbPress instance
	 * <methodCall>
	 *     <methodName>bb.getTopics</methodName>
	 *     <params></params>
	 * </methodCall>
	 *
	 * XML-RPC request to get all topics in the forum with id number 34
	 * <methodCall>
	 *     <methodName>bb.getTopics</methodName>
	 *     <params>
	 *         <param><value><int>34</int></value></param>
	 *     </params>
	 * </methodCall>
	 *
	 * XML-RPC request to get the latest 5 topics in the forum with slug "first-forum"
	 * <methodCall>
	 *     <methodName>bb.getTopics</methodName>
	 *     <params>
	 *         <param><value><string>first-forum</string></value></param>
	 *         <param><value><int>1</int></value></param>
	 *         <param><value><int>5</int></value></param>
	 *     </params>
	 * </methodCall>
	 */
	function bb_getTopics($args)
	{
		do_action('bb_xmlrpc_call', 'bb.getTopics');

		$this->escape($args);

		if (is_array($args)) {
			// Can be numeric id or slug - sanitised in get_forum()
			$forum_id = $args[0];

			// Can only be an integer
			$page = (int) $args[1];

			// Can only be an integer
			$number = (int) $args[2];
		} else {
			// Can be numeric id or slug - sanitised in get_forum()
			$forum_id = $args;
		}

		// Check the requested forum exists
		if ($forum_id) {
			if (!$forum = get_forum($forum_id)) {
				$this->error = new IXR_Error(404, __('The requested forum does not exist.'));
				return $this->error;
			}

			// The forum id may have been a slug, so make sure it's an integer here
			$get_topics_args = array('forum' => $forum->forum_id);
		} else {
			$get_topics_args = array('forum' => false);
		}

		if (!isset($page) || !$page) {
			$get_topics_args['page'] = false;
		} else {
			$get_topics_args['page'] = $page;
		}

		if (!isset($number) || !$number) {
			$get_topics_args['number'] = false;
		} else {
			$get_topics_args['number'] = $number;
		}

		// Get the topics
		if (!$topics = get_latest_topics($get_topics_args)) {
			$this->error = new IXR_Error(404, __('No topics found.'));
			return $this->error;
		}

		$_topics = array();
		foreach ($topics as $topic) {
			// Cast to an array
			$_topic = (array) $topic;
			// Set the URI
			$_topic['topic_uri'] = get_topic_link($_topic['topic_id']);
			// Set readable times
			$_topic['topic_start_time_since'] = bb_since($_topic['topic_start_time']);
			$_topic['topic_time_since'] = bb_since($_topic['topic_time']);
			// Set the display names
			$_topic['topic_poster_display_name'] = get_user_display_name($_topic['topic_poster']);
			$_topic['topic_last_poster_display_name'] = get_user_display_name($_topic['topic_last_poster']);
			// Remove some sensitive user ids
			unset($_topic['topic_poster']);
			unset($_topic['topic_last_poster']);
			$_topics[$_topic['topic_id']] = $_topic;
			// Allow plugins to add to the array
			$_topics[$_topic['topic_id']] = apply_filters('bb.getTopics_sanitise', $_topic, (array) $topic);
		}

		// Return the topics
		return $_topics;
	}

	/**
	 * Returns details of a topic
	 *
	 * This method does not require authentication
	 *
	 * @since 1.0
	 * @return array|object An array containing details of the returned topic when successfully executed or an IXR_Error object on failure
	 * @param array $args The topic's id or slug.
	 *
	 * XML-RPC request to get the topic with id number 105
	 * <methodCall>
	 *     <methodName>bb.getTopic</methodName>
	 *     <params>
	 *         <param><value><int>105</int></value></param>
	 *     </params>
	 * </methodCall>
	 *
	 * XML-RPC request to get the topic with slug "cheesy-biscuits"
	 * <methodCall>
	 *     <methodName>bb.getTopic</methodName>
	 *     <params>
	 *         <param><value><string>cheesy-biscuits</string></value></param>
	 *     </params>
	 * </methodCall>
	 */
	function bb_getTopic($args)
	{
		do_action('bb_xmlrpc_call', 'bb.getTopic');

		$this->escape($args);

		// Don't accept arrays of arguments
		if (is_array($args)) {
			$this->error = new IXR_Error(404, __('The requested method only accepts one parameter.'));
			return $this->error;
		} else {
			// Can be numeric id or slug - sanitised in get_topic()
			$topic_id = $args;
		}

		// Check the requested topic exists
		if (!$topic_id || !$topic = get_topic($topic_id)) {
			$this->error = new IXR_Error(404, __('The requested topic does not exist.'));
			return $this->error;
		}

		// Cast to an array
		$_topic = (array) $topic;
		// Set the URI
		$_topic['topic_uri'] = get_topic_link($_topic['topic_id']);
		// Set readable times
		$_topic['topic_start_time_since'] = bb_since($_topic['topic_start_time']);
		$_topic['topic_time_since'] = bb_since($_topic['topic_time']);
		// Set the display names
		$_topic['topic_poster_display_name'] = get_user_display_name($_topic['topic_poster']);
		$_topic['topic_last_poster_display_name'] = get_user_display_name($_topic['topic_last_poster']);
		// Remove some sensitive user ids
		unset($_topic['topic_poster']);
		unset($_topic['topic_last_poster']);
		// Allow plugins to add to the array
		$_topic = apply_filters('bb.getTopic_sanitise', $_topic, (array) $topic);

		// Return the topic
		return $_topic;
	}

	/**
	 * Creates a new topic
	 *
	 * This method requires authentication
	 *
	 * @since 1.0
	 * @return integer|object The topic id when successfully created or an IXR_Error object on failure
	 * @param array $args Arguments passed by the XML-RPC call.
	 * @param string $args[0] The username for authentication.
	 * @param string $args[1] The password for authentication.
	 * @param array $args[2] The values for the various parameters in the new topic.
	 * @param string $args[2]['title'] The title of the topic.
	 * @param string $args[2]['text'] The text of the topic.
	 * @param integer $args[2]['forum_id'] The unique id of the forum which will contain this topic, slugs are OK to use too.
	 * @param string|array $args[2]['tags'] A comma delimited string or an array of tags to add to the topic (optional).
	 *
	 * XML-RPC request to create a new topic called "Insane monkeys" inside the forum with id 2
	 * <methodCall>
	 *     <methodName>bb.newTopic</methodName>
	 *     <params>
	 *         <param><value><string>joeblow</string></value></param>
	 *         <param><value><string>123password</string></value></param>
	 *         <param><value><struct>
	 *             <member>
	 *                 <name>title</name>
	 *                 <value><string>Insane monkeys</string></value>
	 *             </member>
	 *             <member>
	 *                 <name>text</name>
	 *                 <value><string>I just saw some insane monkeys eating bananas, did anyone else see that?</string></value>
	 *             </member>
	 *             <member>
	 *                 <name>forum_id</name>
	 *                 <value><integer>2</integer></value>
	 *             </member>
	 *             <member>
	 *                 <name>tags</name>
	 *                 <value><string>monkeys, bananas</string></value>
	 *             </member>
	 *         </struct></value></param>
	 *     </params>
	 * </methodCall>
	 */
	function bb_newTopic($args)
	{
		$this->escape($args);

		// Get the login credentials
		$username = $args[0];
		$password = $args[1];

		// Check the user is valid
		if( !$user_id = $this->authenticate( $username, $password ) ) {
			// The error is set in authenticate()
			return $this->error;
		}

		// Set the current user
		$user = bb_set_current_user( $user_id );

		// Make sure they are allowed to do this
		if(!bb_current_user_can('write_topics') || !bb_current_user_can('write_posts')) {
			$this->error = new IXR_Error(403, __('You are not allowed to create new topics.'));
			return $this->error;
		}

		// Do the action once we are authenticated
		do_action('bb_xmlrpc_call', 'bb.newTopic');

		// Make sure there is something for us to do
		if (!$args[2] || !is_array($args[2]) || !count($args[2])) {
			$this->error = new IXR_Error(404, __('No data for the new topic was supplied.'));
			return $this->error;
		} else {
			$structure = (array) $args[2];
		}

		// There needs to be a title
		if (!isset($structure['title']) || !$structure['title']) {
			$this->error = new IXR_Error(404, __('You must supply a title for the topic.'));
			return $this->error;
		}

		// There needs to be text
		if (!isset($structure['text']) || !$structure['text']) {
			$this->error = new IXR_Error(404, __('You must supply text for the topic.'));
			return $this->error;
		}

		// There needs to be a valid forum id
		if (!isset($structure['forum_id']) || !$structure['forum_id']) {
			$this->error = new IXR_Error(404, __('You must supply a forum id for the topic.'));
			return $this->error;
		}

		// Check the requested forum exists
		if (!$forum = get_forum($structure['forum_id'])) {
			$this->error = new IXR_Error(404, __('The requested forum does not exist.'));
			return $this->error;
		}

		// Create the array for use with bb_insert_topic()
		$bb_insert_topic_args = array(
			'topic_title' => trim($structure['title']),
			'forum_id' => (int) $forum->forum_id,
			'tags' => trim($structure['tags'])
		);

		// Create the topic
		if (!$topic_id = bb_insert_topic($bb_insert_topic_args)) {
			$this->error = new IXR_Error(404, __('The new topic could not be created.'));
			return $this->error;
		}

		if (!$post_id = bb_new_post($topic_id, $structure['text'])) {
			$this->error = new IXR_Error(404, __('The new post could not be created.'));
			return $this->error;
		}

		return (int) $topic_id;
	}



	/**
	 * bbPress publishing API - Options XML-RPC methods
	 */

	/**
	 * Initialises site options which can be manipulated using XML-RPC
	 *
	 * @since 1.0
	 * @return void
	 */
	function initialise_site_option_info()
	{
		$this->site_options = array(
			// Read only options
			'software_name'		=> array(
				'desc'			=> __( 'Software Name' ),
				'readonly'		=> true,
				'value'			=> 'bbPress'
			),
			'software_version'	=> array(
				'desc'			=> __( 'Software Version' ),
				'readonly'		=> true,
				'option'		=> 'version'
			),
			'site_url'			=> array(
				'desc'			=> __( 'Site URL' ),
				'readonly'		=> true,
				'option'		=> 'uri'
			),

			// Updatable options
			'site_name'		=> array(
				'desc'			=> __( 'Site Name' ),
				'readonly'		=> false,
				'option'		=> 'name'
			),
			'site_description'	=> array(
				'desc'			=> __( 'Site Description' ),
				'readonly'		=> false,
				'option'		=> 'description'
			),
			'time_zone'			=> array(
				'desc'			=> __( 'Time Zone' ),
				'readonly'		=> false,
				'option'		=> 'gmt_offset'
			),
			'date_format'		=> array(
				'desc'			=> __( 'Date/Time Format' ),
				'readonly'		=> false,
				'option'		=> 'datetime_format'
			),
			'date_format'		=> array(
				'desc'			=> __( 'Date Format' ),
				'readonly'		=> false,
				'option'		=> 'date_format'
			)
		);

		$this->site_options = apply_filters( 'xmlrpc_site_options', $this->site_options );
	}

	/**
	 * Compiles site options into an array suitable to be passed back through the XML-RPC server
	 *
	 * @since 1.0
	 * @return array The site options in an array
	 * @param array $options An array of options to fetch and return.
	 */
	function _getOptions($options)
	{
		$data = array();
		foreach ($options as $option) {
			if (array_key_exists($option, $this->site_options)) {
				$data[$option] = $this->site_options[$option];

				// Is the value static or dynamic?
				if (isset($data[$option]['option'])) {
					$data[$option]['value'] = bb_get_option( $data[$option]['option'] );
					unset($data[$option]['option']);
				}
			}
		}

		return $data;
	}

	/**
	 * Gets the specified site options
	 *
	 * This method does not require authentication
	 *
	 * @since 1.0
	 * @return array|object An array containing the specified options when successfully executed or an IXR_Error object on failure
	 * @param array $args The options to be retrieved, when omitted the method returns all options (optional).
	 *
	 * XML-RPC request to get all site options
	 * <methodCall>
	 *     <methodName>bb.getOptions</methodName>
	 *     <params></params>
	 * </methodCall>
	 *
	 * XML-RPC request to get the site name and site description
	 * <methodCall>
	 *     <methodName>bb.getOptions</methodName>
	 *     <params>
	 *         <param><value><array>
	 *             <data><value><string>site_name</string></value></data>
	 *             <data><value><string>site_description</string></value></data>
	 *         </array></value></param>
	 *     </params>
	 * </methodCall>
	 */
	function bb_getOptions($args)
	{
		$this->escape($args);

		// If there are parameters supplied then make sure they are in an array
		if ($args) {
			$options = (array) $args;
		} else {
			$options = false;
		}

		// If no specific options where asked for, return all of them
		if (!$options || !count($options)) {
			$options = array_keys($this->site_options);
		}

		return $this->_getOptions($options);
	}

	/**
	 * Sets the specified site options to the specified values
	 *
	 * This method requires authentication
	 *
	 * @since 1.0
	 * @return array|object An array containing the specified options when successfully executed or an IXR_Error object on failure
	 * @param array $args Arguments passed by the XML-RPC call.
	 * @param string $args[0] The username for authentication.
	 * @param string $args[1] The password for authentication.
	 * @param array $args[2] The options to be updated along with the new value of the option.
	 *
	 * XML-RPC request to set the site name and site description
	 * <methodCall>
	 *     <methodName>bb.setOptions</methodName>
	 *     <params>
	 *         <param><value><string>joeblow</string></value></param>
	 *         <param><value><string>123password</string></value></param>
	 *         <param><value><struct>
	 *             <member>
	 *                 <name>site_name</name>
	 *                 <value><string>Awesome forums</string></value>
	 *             </member>
	 *             <member>
	 *                 <name>site_description</name>
	 *                 <value><string>My totally awesome forums will kick your butt</string></value>
	 *             </member>
	 *         </struct></value></param>
	 *     </params>
	 * </methodCall>
	 */
	function bb_setOptions( $args ) {
		$this->escape($args);

		// Get the login credentials
		$username = $args[0];
		$password = $args[1];

		// Check the user is valid
		if( !$user_id = $this->authenticate( $username, $password ) ) {
			// The error is set in authenticate()
			return $this->error;
		}

		// Make sure there is something for us to do
		if (!$args[2]) {
			$this->error = new IXR_Error(404, __('You must specify the options you wish to set.'));
			return $this->error;
		} else {
			$options = (array) $args[2];
		}

		// Set the current user
		$user = bb_set_current_user( $user_id );

		// Make sure they are allowed to do this
		if(!bb_current_user_can('manage_options')) {
			$this->error = new IXR_Error(403, __('You are not allowed to update options.'));
			return $this->error;
		}

		// Update the requested options
		foreach( $options as $o_name => $o_value ) {
			$option_names[] = $o_name;

			// If there is no value set skip it
			if (empty($o_value)) {
				continue;
			}

			// If the option doesn't exist skip it
			if (!array_key_exists( $o_name, $this->site_options )) {
				continue;
			}

			// If the option is readonly skip it
			if ($this->site_options[$o_name]['readonly'] == true) {
				continue;
			}

			// Everything is good, update the option
			bb_update_option($this->site_options[$o_name]['option'], $o_value);
		}

		// Now return the updated values
		return $this->_getOptions($option_names);
	}



	/**
	 * Pingback XML-RPC methods
	 */

	/**
	 * Processes pingback requests
	 *
	 * @since 1.0
	 * @link http://www.hixie.ch/specs/pingback/pingback
	 * @return string|object A message of success or an IXR_Error object on failure
	 * @param array $args Arguments passed by the XML-RPC call.
	 * @param string $args[0] The full URI of the post where the pingback is being sent from.
	 * @param string $args[1] The full URI of the post where the pingback is being sent to.
	 *
	 * XML-RPC request to register a pingback
	 * <methodCall>
	 *     <methodName>pingback.ping</methodName>
	 *     <params>
	 *         <param><value><string>http://example.org/2008/09/post-containing-a-link/</string></value></param>
	 *         <param><value><string>http://example.com/2008/08/post-being-linked-to/</string></value></param>
	 *     </params>
	 * </methodCall>
	 */
	function pingback_ping($args)
	{
		do_action('bb_xmlrpc_call', 'pingback.ping');

		$this->escape($args);

		// No particular need to sanitise
		$link_from = $args[0];
		$link_to   = $args[1];

		// Tidy up ampersands in the URLs
		$link_from = str_replace('&amp;', '&', $link_from);
		$link_to   = str_replace('&amp;', '&', $link_to);
		$link_to   = str_replace('&', '&amp;', $link_to);

		// Check if the topic linked to is in our site - a little more strict than WordPress, doesn't pull out the www if added
		if ( !bb_match_domains( $link_to, bb_get_uri() ) ) {
			// These are not the droids you are looking for
			$this->error = new IXR_Error(0, __('This is not the site you are trying to pingback.'));
			return $this->error;
		}

		// Get the topic
		if ( $topic_to = bb_get_topic_from_uri($link_to) ) {
			// Topics shouldn't ping themselves
			if ( $topic_from = bb_get_topic_from_uri($link_from) ) {
				if ( $topic_from->topic_id === $topic_to->topic_id ) {
					$this->error = new IXR_Error(0, __('The source URL and the target URL cannot both point to the same resource.'));
					return $this->error;
				}
			}
		} else {
			$this->error = new IXR_Error(33, __('The specified target URL cannot be used as a target. It either doesn\'t exist, or it is not a pingback-enabled resource.'));
			return $this->error;
		}

		// Let's check that the remote site didn't already pingback this entry
		$query = new BB_Query( 'post', array('topic_id' => $topic_to->topic_id, 'append_meta' => true), 'get_thread' );
		$posts_to = $query->results;
		unset($query);

		// Make sure we have some posts in the topic, this error should never happen really
		if (!$posts_to || !is_array($posts_to) || !count($posts_to)) {
			$this->error = new IXR_Error(0, __('The specified target topic does not contain any posts.'));
			return $this->error;
		}

		// Check if we already have a pingback from this URL
		foreach ($posts_to as $post) {
			if (isset($post->pingback_uri) && trim($post->pingback_uri) === trim($link_from)) {
				$this->error = new IXR_Error(48, __('The pingback has already been registered.'));
				return $this->error;
			}
		}
		unset($posts_to, $post);

		// Give time for the server sending the pingback to finish publishing it's post.
		sleep(1);

		// Let's check the remote site for valid URL and content
		$link_from_source = wp_remote_fopen( $link_from );
		if ( !$link_from_source ) {
			$this->error = new IXR_Error(16, __('The source URL does not exist.'));
			return $this->error;
		}

		// Allow plugins to filter here
		$link_from_source = apply_filters('bb_pre_remote_source', $link_from_source, $link_to);

		// Work around bug in strip_tags()
		$link_from_source = str_replace('<!DOC', '<DOC', $link_from_source);

		// Normalize spaces
		$link_from_source = preg_replace( '/[\s\r\n\t]+/', ' ', $link_from_source );

		// Turn certain elements to double line returns
		$link_from_source = preg_replace( "/ <(h1|h2|h3|h4|h5|h6|p|th|td|li|dt|dd|pre|caption|input|textarea|button|body)[^>]*>/", "\n\n", $link_from_source );

		// Find the title of the page
		preg_match('|<title>([^<]*?)</title>|is', $link_from_source, $link_from_title);
		$link_from_title = $link_from_title[1];
		if ( empty( $link_from_title ) ) {
			$this->error = new IXR_Error(32, __('We cannot find a title on that page.'));
			return $this->error;
		}

		// Strip out all tags except anchors
		$link_from_source = strip_tags( $link_from_source, '<a>' ); // just keep the tag we need

		// Split the source into paragraphs
		$link_from_paragraphs = explode( "\n\n", $link_from_source );

		// Prepare the link to search for in preg_match() once here
		$preg_target = preg_quote($link_to);

		// Loop through the paragraphs looking for the context for the url
		foreach ( $link_from_paragraphs as $link_from_paragraph ) {
			// The url exists
			if ( strpos($link_from_paragraph, $link_to) !== false ) {
				// But is it in an anchor tag
				preg_match(
					"|<a[^>]+?" . $preg_target . "[^>]*>([^>]+?)</a>|",
					$link_from_paragraph,
					$context
				);
				// If the URL isn't in an anchor tag, keep looking
				if ( empty($context) ) {
					continue;
				}

				// We're going to use this fake tag to mark the context in a bit
				// the marker is needed in case the link text appears more than once in the paragraph
				$excerpt = preg_replace('|\</?wpcontext\>|', '', $link_from_paragraph);

				// Prevent really long link text
				if ( strlen($context[1]) > 100 ) {
					$context[1] = substr($context[1], 0, 100) . '...';
				}

				// Set up the marker around the context
				$marker = '<wpcontext>' . $context[1] . '</wpcontext>';
				// Swap out the link for our marker
				$excerpt = str_replace($context[0], $marker, $excerpt);
				// Strip all tags except for our context marker
				$excerpt = trim(strip_tags($excerpt, '<wpcontext>'));
				// Make the marker safe for use in regexp
				$preg_marker = preg_quote($marker);
				// Reduce the excerpt to only include 100 characters on either side of the link
				$excerpt = preg_replace("|.*?\s(.{0,100}" . $preg_marker . "{0,100})\s.*|s", '$1', $excerpt);
				// Strip tags again, to remove the marker wrapper
				$excerpt = strip_tags($excerpt);
				break;
			}
		}

		 // Make sure the link to the target was found in the excerpt
		if ( empty($context) ) {
			$this->error = new IXR_Error(17, __('The source URL does not contain a link to the target URL, and so cannot be used as a source.'));
			return $this->error;
		}

		// Add whacky prefix and suffix to the excerpt and sanitize
		$excerpt = '[...] ' . wp_specialchars( $excerpt ) . ' [...]';
		$this->escape($excerpt);

		// Build an array of post data to insert then insert a new post
		$postdata = array(
			'topic_id' => $topic_to->topic_id,
			'post_text' => $excerpt,
			'poster_id' => 0,
		);
		if (!$post_ID = bb_insert_post($postdata)) {
			$this->error = new IXR_Error(0, __('The pingback could not be added.'));
			return $this->error;
		}

		// Add meta to let us know where the pingback came from
		$link_from = str_replace('&', '&amp;', $link_from);
		$this->escape($link_from);
		bb_update_postmeta($post_ID, 'pingback_uri', $link_from);

		// Add the title to meta
		$this->escape($link_from_title);
		bb_update_postmeta($post_ID, 'pingback_title', $link_from_title);

		// Action for plugins and what not
		do_action('bb_pingback_post', $post_ID);

		// Return success message, complete with emoticon
		return sprintf(__('Pingback from %1$s to %2$s registered. Keep the web talking! :-)'), $link_from, $link_to);
	}



	/**
	 * Returns an array of URLs that pingbacked the given URL
	 *
	 * @since 1.0
	 * @link http://www.aquarionics.com/misc/archives/blogite/0198.html
	 * @return array The array of URLs that pingbacked the given topic
	 * @param array $args Arguments passed by the XML-RPC call.
	 * @param string $args[0] The full URI of the post where the pingback is being sent from.
	 * @param string $args[1] The full URI of the post where the pingback is being sent to.
	 *
	 * XML-RPC request to get all pingbacks on a topic
	 * <methodCall>
	 *     <methodName>pingback.ping</methodName>
	 *     <params>
	 *         <param><value><string>http://example.com/2008/08/post-tobe-queried/</string></value></param>
	 *     </params>
	 * </methodCall>
	 */
	function pingback_extensions_getPingbacks($args)
	{
		do_action('bb_xmlrpc_call', 'pingback.extensions.getPingbacks');

		$this->escape($args);

		// Don't accept arrays of arguments
		if (is_array($args)) {
			$this->error = new IXR_Error(404, __('The requested method only accepts one parameter.'));
			return $this->error;
		} else {
			$url = $args;
		}

		// Tidy up ampersands in the URI
		$url = str_replace('&amp;', '&', $url);
		$url = str_replace('&', '&amp;', $url);

		// Check if the URI is in our site
		if ( !bb_match_domains( $url, bb_get_uri() ) ) {
			// These are not the droids you are looking for
			$this->error = new IXR_Error(0, __('The specified target URL is not on this domain.'));
			return $this->error;
		}

		// Make sure the specified URI is in fact associated with a topic
		if ( !$topic = bb_get_topic_from_uri($url) ) {
			$this->error = new IXR_Error(33, __('The specified target URL cannot be used as a target. It either doesn\'t exist, or it is not a pingback-enabled resource.'));
			return $this->error;
		}

		// Grab the posts from the topic
		$query = new BB_Query( 'post', array('topic_id' => $topic_to->topic_id, 'append_meta' => true), 'get_thread' );
		$posts_to = $query->results;
		unset($query);

		// Check for pingbacks in the post meta data
		$pingbacks = array();
		foreach ($posts_to as $post) {
			if (isset($post->pingback_uri)) {
				$pingbacks[] = $post->pingback_uri;
			}
		}
		unset($post);

		// This will return an empty array on failure
		return $pingbacks;
	}
}



/**
 * Initialises the XML-RPC server
 *
 * @since 1.0
 * @var object The instance of the XML-RPC server class
 */
$bb_xmlrpc_server = new BB_XMLRPC_Server();

?>
